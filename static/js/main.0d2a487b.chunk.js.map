{"version":3,"sources":["utils/formValidation.js","style/login.module.css","style/drawingPage.module.css","style/main.module.css","style/userPage.module.css","style/displayArts.module.css","style/nodes.module.css","style/navItem.module.css","style/artCard.module.css","style/logout.module.css","components/nod.jsx","components/nodes.jsx","store/action/actionType.js","store/action/node.js","components/drawingBoard.jsx","utils/extractColor.js","store/action/saveArt.js","containers/drawingPage.jsx","store/action/general.js","containers/print.jsx","store/action/auth.js","containers/register.jsx","containers/login.jsx","context/home.js","components/main/navItem.jsx","components/main/headerMain.jsx","components/main/header.jsx","containers/home.jsx","components/artCard.jsx","components/ArtCards.jsx","store/action/getAllArt.js","containers/theUser.jsx","store/action/fetchArt.js","containers/displayArts.jsx","components/main/logout.jsx","App.js","reportWebVitals.js","utils/nodeGenerator.js","store/reducers/node.js","store/reducers/generals.js","store/reducers/auth.js","store/reducers/saveArt.js","store/reducers/getAllArt.js","store/reducers/fetchArt.js","index.js"],"names":["module","exports","value","rules","isValid","toReturn","message","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","memo","withRouter","name","clicked","border","shouldPaint","currentShape","currentColor","canvasColor","color","url","useRouteMatch","className","join","onClick","clickHandler","style","backgroundColor","minWidth","minHeight","maxWidth","maxHeight","width","height","borderBottom","borderLeft","borderRight","borderTop","boxSizing","margin","Nodes","nodes","classes","container","map","nodeRow","nodeEl","GENERATE_NODE","IMPORT_NODE","PAINT","ERASE","SHOULD_ERASE","CHANGE_BORDER","COLOR_CHANGE","CLEAR_CANVAS","CHANGE_CANVAS_COLOR","UPDATE_COLOR","START_REGISTER","REGISTER_FAIL","REGISTER_SUCCESS","LOGOUT","AUTO_SIGN","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAIL","FETCH_START","FETCH_FAIL","FETCH_SUCCESS","SAVE_ART_START","SAVE_ART_FAIL","SAVE_ART_SUCCESS","GET_ALL_START","GET_ALL_FAIL","GET_ALL_SUCCESS","updateBackground","oldBackground","type","actionType","payload","dispatch","paint","erase","importNode","data","connect","state","gnr","node","shrink","backgroundIsChanged","backgroundChange","transformServerData","columnLength","rowLength","index","i","row","j","hi","jay","toPush","push","saveFail","window","alert","saveSuccess","token","a","toSend","pixel","axios","post","headers","save","transformedData","flattened","_","flatten","forEach","saveExtractionHelper","saveHelper","isPainting","canvasBackgroundColor","auth","generateNode","clearCanvas","bgcolor","shouldErase","changeBorder","changeColor","changeCanvasColor","useHistory","useState","setColor","setCanvasColor","colorHelper","setColorHelper","backgroundColorHelper","setBackgroundColorHelper","useEffect","buttons","confirm","display","justifyContent","alignItems","flexDirection","fontSize","fontWeight","marginTop","paddingTop","colorchange","console","log","onChange","event","target","second","borderRadius","padding","prompt","redirect","print","to","authFail","authSuccess","loginFail","error","loginSuccess","logout","localStorage","removeItem","countDown","time","setTimeout","load","response","id","_id","expiresIn","username","expiryDate","Date","getTime","setItem","onLogin","login","register","autoLogin","getItem","dateInSeconds","timeLeft","autoSign","loading","onAuth","emailBlurred","setEmailBlurred","passwordBlurred","setPasswordBlurred","enabled","setEnabled","useReducer","validity","checkValidity","valid","email","emailDispatch","password","passwordDispatch","buttonChangeHandler","extracted","main","onSubmit","preventDefault","htmlFor","placeholder","onBlur","disabled","navContext","createContext","valueHandler","toRenderUser","toRenderLogout","loged","exact","mainmain","Header","useContext","NavContext","loggedIn","open","setOpen","Provider","createdAt","toDateString","ArtCards","art","getAllFail","getAllSuccess","get","getAllArts","getAllHelper","getArts","arts","fetch","fetchFail","fetchSuccess","transformed","fetchArt","fetchHelper","useParams","top","loggedOut","logoutRender","path","component","ArtDisplay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","generate","element","initialState","nodeReducer","action","splitname","split","startsWith","newNodes","dataE","splitnameE","newNodesE","clonedNode","cloned","generalReducer","userId","reducer","reducers","combineReducers","authReducer","saveReducer","getAllArtsReducer","fetchArtReducer","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d2a487b.chunk.js","sourcesContent":["\r\n\r\nmodule.exports = function (value, rules) {\r\n    let isValid = true;\r\n    let toReturn =  { value: true, message: '' }\r\n\r\n    if (!rules) {\r\n        return toReturn;\r\n    }\r\n    \r\n    if (rules.required) {\r\n        isValid = value.trim() !== '' && isValid;\r\n\r\n        if (!isValid) {\r\n            toReturn =  { value: false, message: ' is required' }\r\n            return toReturn;\r\n        } \r\n    }\r\n\r\n    if (rules.minLength) {\r\n        isValid = value.length >= rules.minLength && isValid;\r\n\r\n        if (!isValid) {\r\n            toReturn =  { value: false, message: 'minimum length is ' + rules.minLength };\r\n            return toReturn;\r\n        } \r\n    }\r\n\r\n    if (rules.maxLength) {\r\n        isValid = value.length <= rules.maxLength && isValid;\r\n\r\n        if (!isValid) {\r\n            toReturn =  { value: false, message: 'maximum length is ' + rules.maxLength };\r\n            return toReturn;\r\n        } \r\n    }\r\n\r\n    if (rules.isEmail) {\r\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n        isValid = pattern.test(value) && isValid;\r\n\r\n        if (!isValid) {\r\n            toReturn =  { value: false, message: 'is not valid' };\r\n            return toReturn;\r\n        } \r\n    }\r\n\r\n    if (rules.isNumeric) {\r\n        const pattern = /^\\d+$/;\r\n        isValid = pattern.test(value) && isValid;\r\n\r\n        if (!isValid) {\r\n            toReturn =  { value: false, message: 'enter a numeric value' };\r\n            return toReturn;\r\n        } \r\n    }\r\n\r\n    return toReturn;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"login_main__mDgI5\",\"container\":\"login_container__W1mVG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"drawingPage_container__1TfRy\",\"buttons\":\"drawingPage_buttons__14ARE\",\"colorchange\":\"drawingPage_colorchange__3N8yZ\",\"second\":\"drawingPage_second__2Xmc3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"main_container__1aE88\",\"main\":\"main_main__2HHEJ\",\"mainmain\":\"main_mainmain__1V9Dd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"userPage_container__1NhSS\",\"main\":\"userPage_main__bT4qP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"displayArts_container__1AcnR\",\"top\":\"displayArts_top__-k7SG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"nodes_container__l4AJr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"navItem_container__3XB4Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"artCard_container__37AqL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"logout_container__2FCdv\"};","import { memo } from 'react';\r\nimport { useRouteMatch, withRouter } from 'react-router-dom';\r\n\r\nfunction Node({ name, clicked, border, currentShape, shouldPaint, currentColor, canvasColor, color }) {\r\n    const classes = [ 'node' ];\r\n\r\n    // click handler for a single node element\r\n    const clickHandler = (name, shouldPaint, currentColor, canvasColor) => {\r\n        clicked(name, shouldPaint, currentColor, canvasColor);\r\n    }\r\n\r\n    const { url } = useRouteMatch();\r\n\r\n    return (\r\n        <div\r\n            className={ classes.join(' ') }\r\n            onClick={ () => url === '/mine' ? clickHandler(name, shouldPaint, currentColor, canvasColor) : null }\r\n            style={{\r\n                backgroundColor: color,\r\n                minWidth: '11px',\r\n                minHeight: '11px',\r\n                maxWidth: '15px',\r\n                maxHeight: '15px',\r\n                width: url === '/mine' ? '3vmin': '100%',\r\n                height: url === '/mine' ? '3vmin': 'auto',\r\n                borderBottom: border ? '1px solid black' : 'none',\r\n                borderLeft: border ? '1px solid black': 'none',\r\n                borderRight: 'none',\r\n                borderTop: 'none',\r\n                boxSizing: 'border-box',\r\n                margin: '0px'\r\n            }}  \r\n        ></div>\r\n    );\r\n}   \r\n\r\nexport default memo(withRouter(Node));","import { memo } from 'react';  \r\n\r\nimport Node from \"./nod\";\r\nimport classes from '../style/nodes.module.css'\r\n\r\n\r\nfunction Nodes ({ nodes, currentColor, shouldPaint, canvasColor, currentShape, clicked, border }) {\r\n    return (\r\n        <div className= { classes.container }>\r\n            {\r\n                nodes.map((nodeRow) => {\r\n                    return nodeRow.map(nodeEl => {  \r\n                        return    <div key={ nodeEl.name } style={{ margin: '0px', width: 'auto' }}>\r\n                                <Node \r\n                                    key={ nodeEl.name }\r\n                                    name={ nodeEl.name }\r\n                                    color={ nodeEl.color }\r\n                                    currentShape={ currentShape }\r\n                                    canvasColor = { canvasColor }\r\n                                    shouldPaint={ shouldPaint }\r\n                                    currentColor={ currentColor }\r\n                                    clicked={ clicked }\r\n                                    border={ border }\r\n                                />\r\n                            </div>\r\n                    });\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Nodes);","\r\nexport const GENERATE_NODE = 'GENERATE_NODE';\r\nexport const IMPORT_NODE = 'IMPORT_NODE';\r\n\r\nexport const CLICKED = 'CLICKED';\r\nexport const PAINT = 'PAINT';\r\nexport const ERASE = 'ERASE';\r\n\r\nexport const SHOULD_ERASE = 'SHOULD_ERASE';\r\nexport const CHANGE_BORDER = 'CHANGE_BORDER';\r\nexport const COLOR_CHANGE = 'COLOR_CHANGE';\r\n\r\nexport const CLEAR_CANVAS = 'CLEAR_CANVAS';\r\nexport const CHANGE_CANVAS_COLOR = 'CHANGE_CANVAS_COLOR';\r\nexport const UPDATE_COLOR = 'UPDATE_COLOR';\r\n\r\n// registering a new user\r\nexport const START_REGISTER = 'START_REGISTER';\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\n\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const AUTO_SIGN = 'AUTO_SIGN';\r\n\r\n// logging a user in\r\nexport const LOGIN_START = \"LOGIN_START\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\r\n\r\n// fetching arts\r\nexport const FETCH_START = 'FETCH_START';\r\nexport const FETCH_FAIL = 'FETCH_FAIL';\r\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\r\n\r\n// save the artwork to the db\r\nexport const SAVE_ART_START = 'SAVE_ART_START';\r\nexport const SAVE_ART_FAIL = 'SAVE_ART_FAIL';\r\nexport const SAVE_ART_SUCCESS = 'SAVE_ART_SUCCESS';\r\n\r\nexport const GET_ALL_START = 'GET_ALL_START';\r\nexport const GET_ALL_FAIL = 'GET_ALL_FAIL';\r\nexport const GET_ALL_SUCCESS = 'GET_ALL_SUCCESS';\r\n\r\n// export const SAVE_ART_START = 'SAVE_ARTSTART';\r\n// export const SAVE_ART_FAIL = 'GET_ALL_FAIL';\r\n// export const SAVE_ART_SUCCESS = 'GET_ALL_SUCCESS';\r\n","import * as actionType from './actionType';\r\n\r\nexport const generate = () => {\r\n    return {\r\n        type: actionType.GENERATE_NODE,\r\n        payload: { color: 'yellow' }\r\n    }\r\n}\r\n\r\nexport const clearCanvas = (backgroundColor) => {\r\n    return {\r\n        type: actionType.CLEAR_CANVAS,\r\n        backgroundColor: backgroundColor\r\n    }\r\n}\r\n\r\nexport const updateBackground = (color, oldBackground) => {\r\n    return {\r\n        type: actionType.UPDATE_COLOR,\r\n        payload: { color, oldBackground }\r\n    }\r\n}  \r\n\r\nexport const paint = (name, currentColor) => {\r\n    return {\r\n        type: actionType.PAINT,\r\n        payload: { name, currentColor }\r\n    }\r\n}\r\n\r\nexport const erase = (name, canvasColor) => {\r\n    return {\r\n        type: actionType.ERASE,\r\n        payload: { name, canvasColor }\r\n    }\r\n}\r\n\r\nexport const clicked = (name, shouldPaint, currentColor, canvasColor) => {\r\n    return dispatch => {\r\n        if (shouldPaint) {\r\n            dispatch(paint(name, currentColor));\r\n        } else {\r\n            dispatch(erase(name, canvasColor));\r\n        }\r\n    }\r\n}\r\n\r\nexport const importNode = (data) => {\r\n    return {\r\n        type: actionType.IMPORT_NODE,\r\n        data: data\r\n    }\r\n}","import { connect } from 'react-redux';\r\nimport { useRouteMatch } from 'react-router-dom';\r\n\r\nimport Nodes from \"./nodes\";\r\nimport { clicked, updateBackground } from '../store/action/node';\r\n\r\n// we need shrink here for margin or not\r\nfunction DrawingBoard ({ \r\n    nodes, currentColor, shouldPaint, \r\n    canvasColor, currentShape, border, \r\n    clicked, backgroundIsChanged,\r\n    updateBackground\r\n}) {\r\n    const { url } = useRouteMatch();\r\n\r\n    return (\r\n        <div className=\"drawingBoard\">\r\n            <Nodes \r\n                nodes={ nodes }\r\n                currentColor={ currentColor }\r\n                shouldPaint={ shouldPaint }\r\n                canvasColor={ canvasColor }\r\n                currentShape={ currentShape }\r\n                border={ \r\n                    url === '/mine' ?\r\n                    border: null\r\n                }\r\n                clicked={ clicked }\r\n                backgroundChange= { backgroundIsChanged }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currentColor: state.gnr.currentColor,\r\n        shouldPaint: state.gnr.shouldPaint,\r\n        canvasColor: state.gnr.canvasColor,\r\n        border: state.gnr.border,\r\n        nodes: state.node.nodes,\r\n        currentShape: state.gnr.currentShape,\r\n        shrink: state.gnr.shrink,\r\n        backgroundIsChanged: state.gnr.canvasColor !== 'yellow'\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        clicked: (name, shouldPaint, currentColor, canvasColor) => dispatch(clicked(name, shouldPaint, currentColor, canvasColor)),\r\n        updateBackground: (color, oldBackground) => dispatch(updateBackground(color, oldBackground))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DrawingBoard);","import _ from 'lodash';\r\n\r\nexport function saveExtractionHelper (data) {\r\n    const flattened = _.flatten(data);\r\n    // console.log(flattened);\r\n\r\n    const toReturn = [];\r\n\r\n    flattened.forEach((node) => {\r\n        toReturn.push(node.color);\r\n    });\r\n\r\n    return toReturn;\r\n}\r\n\r\n\r\n// function that generates the node element of the drawing board\r\nexport function transformServerData (columnLength, rowLength, data) {\r\n    const toReturn = [];\r\n    let index = 0;\r\n\r\n    for(let i = 0; i < columnLength; i++) {\r\n        const row = [];\r\n\r\n        // generate each row of the nodes\r\n        for (let j = 0; j < rowLength; j++) {\r\n            // turn the [i, j] value to string\r\n            let hi = \"\" + i;\r\n            let jay = \"\" + j;\r\n\r\n            // padstart each i items to have a length of 2 by force\r\n            if (hi.length < 2) {\r\n                hi = \"0\" + i\r\n            }\r\n\r\n            // padstart each j items to have a length of 2 by force\r\n            if (jay.length < 2) {\r\n                jay = \"0\" + j;\r\n            }\r\n\r\n            // creation of each node\r\n            const toPush = {\r\n                color: data[index],\r\n                name: `${ hi }|${ jay }`\r\n            };\r\n\r\n            index++\r\n            row.push(toPush);\r\n        }\r\n\r\n        toReturn.push(row);\r\n    }\r\n\r\n    return toReturn;\r\n}\r\n\r\n","import axios from 'axios';\r\n\r\nimport * as actionType from './actionType';\r\nimport { saveExtractionHelper } from '../../utils/extractColor';\r\n\r\nconst saveStart = () => {\r\n    return {\r\n        type: actionType.SAVE_ART_START\r\n    }\r\n}\r\n\r\nconst saveFail = () => {\r\n    window.alert('something went wrong');\r\n\r\n    return {\r\n        type: actionType.SAVE_ART_FAIL\r\n    }\r\n}\r\n\r\nconst saveSuccess = () => {\r\n    window.alert('saved');\r\n\r\n    return {\r\n        type: actionType.SAVE_ART_SUCCESS\r\n    }\r\n}\r\n\r\nasync function saveHelper (dispatch, token, data, name) {\r\n    try {\r\n        const toSend = { pixel: data, name: name }\r\n\r\n        await axios.post('http://localhost:3030/api/art/create', toSend, {\r\n            headers: { 'x-auth-token': token }\r\n        });\r\n\r\n        //await axios.post(`https://proj-pix-art-wxv19.herokuapp.com/api/art/create`, toSend, {\r\n        //     headers: { 'x-auth-token': token }\r\n        // });\r\n\r\n        dispatch(saveSuccess());  \r\n    } catch (err) {\r\n        dispatch(saveFail());\r\n    }\r\n}\r\n\r\nexport const save = (token, data, name) => {\r\n    const transformedData = saveExtractionHelper(data);\r\n    return dispatch => {\r\n        dispatch(saveStart());\r\n        saveHelper(dispatch, token, transformedData, name);\r\n    }\r\n}","import { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport DrawingBoard from \"../components/drawingBoard\";\r\nimport { generate } from '../store/action/node';\r\nimport { shouldErase, changeBorder, changeColor, changeCanvasColor } from '../store/action/general';\r\nimport {  updateBackground, clearCanvas } from '../store/action/node';\r\nimport classes from '../style/drawingPage.module.css';\r\nimport { save } from '../store/action/saveArt';\r\n\r\nfunction DrawingPage ({ \r\n    isPainting, border, changeBorder, \r\n    changeColor, changeCanvasColor, \r\n    generateNode, shouldErase, clearCanvas,\r\n    updateBackground, canvasBackgroundColor, \r\n    token, nodes, save\r\n}) {\r\n    const { push } = useHistory();\r\n    const [ color, setColor ] = useState('#00ff00');\r\n    const [ canvasColor, setCanvasColor ] = useState(\"#555555\");\r\n    const [ colorHelper, setColorHelper ] = useState('');\r\n    const [ backgroundColorHelper, setBackgroundColorHelper ] = useState('');\r\n\r\n    useEffect(() => {\r\n        // generate nodes\r\n        generateNode();\r\n    }, [generateNode]);\r\n\r\n    const eraseButtonHandler = () => {\r\n        shouldErase();\r\n    }\r\n\r\n    const borderButtonHandler = () => {\r\n        changeBorder();\r\n    }\r\n\r\n    // handler for changing painting color\r\n    const colorChangeHandler = () => {\r\n        if (colorHelper === '') {\r\n            return;\r\n        }\r\n        \r\n        setColor(colorHelper);\r\n        changeColor(colorHelper);\r\n        console.log(color)\r\n    }\r\n\r\n    // handler for changing background color\r\n    const canvasColorChangeHandler = (event) => {\r\n        if (backgroundColorHelper === '') {\r\n            return;\r\n        }\r\n        // update the color of every node\r\n        updateBackground(backgroundColorHelper, canvasBackgroundColor);\r\n        // change the canvas color in the store\r\n        changeCanvasColor(backgroundColorHelper);\r\n        // set the state of the background color\r\n        setCanvasColor(backgroundColorHelper);\r\n    }\r\n\r\n    const clearCanvasButtonHandler = () => {\r\n        if (window.confirm('are you sure you want to clear the canvas?')) {\r\n            clearCanvas(canvasBackgroundColor);\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    const saveButtonHandler = () => {\r\n        // get node, token\r\n        // dispatch\r\n        if (!token.trim()) {\r\n            push('/login');\r\n        } else {\r\n            const name = window.prompt('what do you want to call the artwork?');\r\n            save(token, nodes, name);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={ classes.container }>\r\n            {/* nft mine */}\r\n            <div className={ classes.buttons }>\r\n                <button\r\n                    onClick={ eraseButtonHandler }\r\n                >   {\r\n                        isPainting ?\r\n                            'erase':\r\n                            'paint'\r\n                    }\r\n                </button>\r\n\r\n                <button\r\n                    onClick={ borderButtonHandler }\r\n                >   {\r\n                        border ?\r\n                            'no border':\r\n                            'use border'\r\n                    }\r\n                </button>\r\n\r\n                <button\r\n                    onClick={ clearCanvasButtonHandler }\r\n                >   clear canvas\r\n                </button>\r\n            </div>\r\n\r\n            \r\n            <div\r\n                style={{ \r\n                    width: \"100%\", \r\n                    display: 'flex', \r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    margin: '0px 30px',\r\n                    flexDirection: 'column',\r\n                    fontSize: '30px',\r\n                    fontWeight: 'bold',\r\n                    marginTop: '2px',\r\n                    paddingTop: '2px',\r\n                    color: 'purple'\r\n                }}\r\n            >\r\n                nft mine \r\n                <DrawingBoard />\r\n            </div>\r\n\r\n            <div className={ classes.colorchange }>\r\n                <div>\r\n                    <button\r\n                        onClick={ colorChangeHandler }\r\n                    >apply col</button>\r\n                    {/* colorChangeHandler */}\r\n                    <input \r\n                        type=\"color\"\r\n                        onChange={ (event) => {\r\n                            setColorHelper(event.target.value)\r\n                        } } \r\n                        value={color}\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    <button\r\n                        className={ classes.second }\r\n                        onClick={ canvasColorChangeHandler }\r\n                    >apply bg</button>\r\n                    {/* canvasColorChangeHandler */}\r\n                    <input \r\n                        type=\"color\"\r\n                        onChange={ (event) => {\r\n                            setBackgroundColorHelper(event.target.value)\r\n                        } } \r\n                        value={canvasColor}\r\n                    />\r\n                </div>\r\n                <button\r\n                    style={{ \r\n                        width: '116px',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '20px',\r\n                        height: '40px',\r\n                        backgroundColor: 'purple',\r\n                        padding: '0px',\r\n                        marginTop: '2px'\r\n                    }}\r\n                    onClick={ () => push('/print')}\r\n                >print</button>\r\n\r\n                <button\r\n                    style={{ \r\n                        width: '116px',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '20px',\r\n                        height: '40px',\r\n                        backgroundColor: 'purple',\r\n                        padding: '0px',\r\n                        marginTop: '2px'\r\n                    }}\r\n                    onClick={ saveButtonHandler }\r\n                >Save</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        generateNode: () => dispatch(generate()),\r\n        clearCanvas: (bgcolor) => dispatch(clearCanvas(bgcolor)),\r\n        shouldErase: () => dispatch(shouldErase()),\r\n        changeBorder: () => dispatch(changeBorder()),\r\n        changeColor: (color) => dispatch(changeColor(color)),\r\n        changeCanvasColor: (color) => dispatch(changeCanvasColor(color)),\r\n        updateBackground: (color, oldBackground) => dispatch(updateBackground(color, oldBackground)),\r\n        save: (token, data, name) => dispatch(save(token, data, name))\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isPainting: state.gnr.shouldPaint,\r\n        border: state.gnr.border,\r\n        canvasBackgroundColor: state.gnr.canvasColor,\r\n        nodes: state.node.nodes,\r\n        token: state.auth.token\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DrawingPage);","import * as actionType from './actionType';\r\n\r\nexport const shouldErase = () => {\r\n    return {\r\n        type: actionType.SHOULD_ERASE\r\n    }\r\n}\r\n\r\nexport const changeBorder = () => {\r\n    return {\r\n        type: actionType.CHANGE_BORDER\r\n    }\r\n}\r\n\r\nexport const changeColor = (color) => {\r\n    return {\r\n        type: actionType.COLOR_CHANGE,\r\n        color: color\r\n    }\r\n}\r\n\r\nexport const changeCanvasColor = (color) => {\r\n    return {\r\n        type: actionType.CHANGE_CANVAS_COLOR,\r\n        color: color\r\n    }\r\n}","import { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport DrawingBoard from '../components/drawingBoard';\r\n\r\nfunction Print ({ redirect }) {\r\n    // if the length of the nodes in the store is less\r\n    // than 0, we redirect to the mine page\r\n\r\n    useEffect(() => {\r\n        // print if we are not redirecting\r\n        if ( !redirect ) {\r\n            window.print();\r\n        }\r\n    }, [redirect]);\r\n\r\n    return (\r\n        redirect ? <Redirect to='/mine'/> :\r\n        <div\r\n            style={{ \r\n                width:'100vw',\r\n                height: '100vh',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n            }}\r\n        > \r\n            <div\r\n                style={{ \r\n                    width: \"100%\", \r\n                    display: 'flex', \r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    margin: '0px 30px',\r\n                    flexDirection: 'column',\r\n                    fontSize: '30px',\r\n                    fontWeight: 'bold',\r\n                    marginTop: '2px',\r\n                    paddingTop: '2px',\r\n                    color: 'purple'\r\n                }}\r\n            >\r\n                <DrawingBoard />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// check if the node length is store is greater than 0\r\nconst mapStateToProps = state => {\r\n    return {\r\n        redirect: state.node.nodes.length > 0 ? false : true\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Print);","import axios from 'axios';\r\n\r\nimport * as actionType from './actionType';\r\n\r\n// action creator for starting registration\r\nexport const authStart = () => {\r\n    return {\r\n        type: actionType.START_REGISTER\r\n    }\r\n}\r\n\r\n// action creator for failed registration\r\nexport const authFail = () => {\r\n    return {\r\n        type: actionType.REGISTER_FAIL\r\n    }\r\n}\r\n\r\n// action creator for successful registration\r\nexport const authSuccess = (payload) => {\r\n    return {\r\n        type: actionType.REGISTER_SUCCESS,\r\n        payload: payload\r\n    }\r\n}\r\n\r\n// action creator for starting loging in\r\nexport const loginStart = () => {\r\n    return {\r\n        type: actionType.LOGIN_START\r\n    }\r\n}\r\n\r\n// action creator for failed login\r\nexport const loginFail = (error) => {\r\n    return {\r\n        type: actionType.LOGIN_FAIL,\r\n        error: error\r\n    }\r\n}\r\n\r\n// action creator for successful login\r\nexport const loginSuccess = (payload) => {\r\n    return {\r\n        type: actionType.LOGIN_SUCCESS,\r\n        payload: payload\r\n    }\r\n}\r\n\r\n// action creator for signing in automatically\r\nexport const autoSign = (payload) => {\r\n    return {\r\n        type: actionType.AUTO_SIGN,\r\n        payload: payload\r\n    }\r\n}\r\n\r\n// action creator for logging users out\r\nexport const logout = () => {\r\n    // remove the id, token and exipration date from local storage\r\n    localStorage.removeItem('id');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('expiryDate');\r\n    localStorage.removeItem('username');\r\n\r\n    return {\r\n        type: actionType.LOGOUT\r\n    }\r\n}\r\n\r\n// expiry logout timout dispatcher\r\nexport const countDown = (time) => {\r\n    return dispatch => {\r\n        setTimeout(() => {\r\n            dispatch(logout());\r\n        }, time * 1000);\r\n    }\r\n}\r\n\r\n// asynchrous registration function helper\r\nasync function register (load, dispatch, push) {\r\n    try {\r\n        // post to the server\r\n        // const response = await axios.post('http://localhost:3030/api/register', load);\r\n\r\n        // ! to be changed\r\n        const response = await axios.post('https://proj-pix-art-wxv19.herokuapp.com/api/register', load);\r\n\r\n        // set token, id and expiration date\r\n        const token = response.headers['x-auth-token'];\r\n        const id = response.data.data._id;\r\n        const expiresIn = +response.data.data.expiresIn;\r\n        const username = response.data.data.username;\r\n\r\n\r\n        // calculate the expiration date in milliseconds\r\n        const expiryDate = (new Date()).getTime() + expiresIn * 1000;\r\n\r\n        const payload = { id, token, username }\r\n\r\n        // store id, token, exipration date in local storage\r\n        localStorage.setItem('id', id);\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('username', username);\r\n        localStorage.setItem('expiryDate', expiryDate);\r\n\r\n        // dispatch authenication success and logout countdown\r\n        dispatch(authSuccess(payload));\r\n        dispatch(countDown(expiresIn));\r\n\r\n        // redirect to /user\r\n        push('/user');\r\n    } catch (ex) {\r\n        // dispatch failure to register\r\n        dispatch(authFail());\r\n    }\r\n}\r\n\r\nasync function login (load, dispatch, push) {\r\n    try {\r\n        // post login request to the server\r\n        // const response = await axios.post('http://localhost:3030/api/login', load);\r\n\r\n        const response = await axios.post('https://proj-pix-art-wxv19.herokuapp.com/api/login', load);\r\n\r\n        // set token, id, expiresIn\r\n        const token = response.headers['x-auth-token'];\r\n        const id = response.data.data._id;\r\n        const expiresIn = +response.data.data.expiresIn;\r\n        const username = response.data.data.username;\r\n\r\n        // set the expiration date in milliseconds\r\n        const expiryDate = (new Date()).getTime() + expiresIn * 1000;\r\n\r\n        // payload for successful login\r\n        const payload = { id, token, username }\r\n\r\n        // set the id, token and expirationdate in the local storage\r\n        localStorage.setItem('id', id);\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('expiryDate', expiryDate); \r\n        localStorage.setItem('username', username);\r\n\r\n        // dispatch login and countdown for logging out when token expires;\r\n        dispatch(loginSuccess(payload));\r\n        dispatch(countDown(expiresIn));\r\n\r\n        push('/user');\r\n    } catch (ex) {\r\n        // dispatch login failure\r\n        dispatch(loginFail(ex.message));\r\n    }\r\n}\r\n\r\n// dispatch login start and reaches out to the web with the login helper\r\nexport const onLogin = (payload, push) => {\r\n    return dispatch => {\r\n        dispatch(loginStart());\r\n        login(payload, dispatch, push);\r\n    }\r\n}\r\n\r\n// dispatch register start and reaches out to the web with the register helper\r\nexport const auth = ( payload, push ) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        register(payload, dispatch, push);\r\n    }\r\n}\r\n\r\n// dispatch for auto logging in of the user when the site is visited\r\nexport const autoLogin = () => {\r\n    return dispatch => {\r\n        // get the token, id and expiry date from the loacl storage\r\n        const token = localStorage.getItem('token');\r\n        const id = localStorage.getItem('id');\r\n        const expiryDate = localStorage.getItem('expiryDate');\r\n        const username = localStorage.getItem('username');\r\n        const dateInSeconds = +expiryDate\r\n\r\n        if (!token || !id) {\r\n            // dispatch logout if theres is no token or id in the localstorage\r\n            dispatch(logout());\r\n        } else {\r\n            if (dateInSeconds < (new Date().getTime())) {\r\n                // dispatch logout if the token has expired\r\n                dispatch(logout());\r\n            } else {\r\n                // get the time left in milliseconds\r\n                const timeLeft = dateInSeconds - (new Date().getTime());\r\n\r\n                const payload = { id, token, username }\r\n\r\n                // dispatch autoSignIn and logout countdown timer \r\n                dispatch(autoSign(payload));\r\n                dispatch(countDown(timeLeft / 1000));\r\n            }\r\n        }\r\n    }\r\n}","\r\n\r\nimport { useReducer, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n// import Footer from \"../components/footer\";\r\nimport checkValidity from '../utils/formValidation';\r\nimport classes from '../style/login.module.css';\r\nimport { auth } from '../store/action/auth';\r\n\r\nfunction Register ({ onAuth, error, loading }) {\r\n    const [ emailBlurred, setEmailBlurred ] = useState(false);\r\n    const [ passwordBlurred, setPasswordBlurred ] = useState(false);\r\n    const [ enabled, setEnabled ] = useState(false);\r\n    const { push } = useHistory();\r\n\r\n    // ruducer function for email states\r\n    const emailReducer = ( state, event ) => {\r\n        // defining rules for a valid email input\r\n        const rules = {\r\n            required: true,\r\n            isEmail: true\r\n        }\r\n\r\n        // checking the validity of the input\r\n        const validity = checkValidity(event.target.value, rules).value;\r\n        const message =  checkValidity(event.target.value, rules).message;\r\n\r\n        return {\r\n            ...state,\r\n            value: event.target.value,\r\n            valid: validity,\r\n            message: message\r\n        }\r\n    }\r\n\r\n    // ruducer function for password states\r\n    const passwordReducer = ( state, event ) => {\r\n        // defining the rules for a valid password\r\n        const rules = {\r\n            required: true,\r\n            minLength: 6,\r\n            maxLength: 30\r\n        }\r\n\r\n        // checking the validity of the inut\r\n        const validity = checkValidity(event.target.value, rules).value;\r\n        const message =  checkValidity(event.target.value, rules).message;\r\n\r\n        return {\r\n            ...state,\r\n            value: event.target.value,\r\n            valid: validity,\r\n            message: message\r\n        }\r\n    }\r\n    // connectinf the reducer function with the state using useReducer\r\n    const [ email, emailDispatch ] = useReducer(emailReducer, { value: '', valid: false, message: '' });\r\n    const [ password, passwordDispatch ] = useReducer(passwordReducer, { value: '', valid: false, message: '' });\r\n\r\n    // function for cheching if the register button should be enabled or not\r\n    const buttonChangeHandler = () => {\r\n        const extracted = email.valid && password.valid;\r\n        setEnabled(extracted);\r\n    }\r\n\r\n    const emailOnblurHandler = () => {\r\n        setEmailBlurred(true);\r\n    }\r\n\r\n    const passwordOnblurHandler = () => {\r\n        setPasswordBlurred(true);\r\n    }\r\n\r\n    // function that is called when the submit button in the form is clicked\r\n    const onSubmitFormHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        // data to be sent\r\n        const toSend = {\r\n            email: email.value,\r\n            password: password.value\r\n        }\r\n\r\n        // send the data to the backend withe the help if actio creatir and the store\r\n        onAuth(toSend, push);\r\n    }\r\n\r\n    // handler for changing the page to login page\r\n    const loginButtonHandler = () => {\r\n        push('/login');\r\n    }\r\n\r\n    return (\r\n        <div className={ classes.main }>\r\n            <div className={ classes.container }>\r\n                <h3>Register</h3>\r\n                <div>\r\n                    mine the next big nft for free\r\n                </div>\r\n\r\n                <form\r\n                    onSubmit={ onSubmitFormHandler }\r\n                >\r\n                    { \r\n                        error && <p \r\n                            style={{ color: 'red', fontWeight: 'bold', fontSize: '23px' }}\r\n                        >something went wrong</p>\r\n                    }\r\n                    <div>  \r\n                        {/* { error && <p \r\n                                style={{ color: 'red', fontWeight: 'bold', fontSize: '23px' }}\r\n                            >something went wrong</p>\r\n                        } */}\r\n                        <label htmlFor=\"email\">\r\n                            {/* if the email has not been blurred or the emailids valid, nothing would be displayed else something is displayed */}\r\n                            {/* same as the password too */}\r\n                            Email { !emailBlurred ? null: email.valid ? null : email.message }\r\n                        </label>\r\n                        <input \r\n                            type=\"email\" \r\n                            placeholder='johnDoe@gmail.com'\r\n                            value={ email.value }\r\n                            onChange= { (event) => {\r\n                                emailDispatch(event);\r\n                                buttonChangeHandler();\r\n                            } }\r\n                            onBlur={ emailOnblurHandler }\r\n                            style={{\r\n                                borderBottom: emailBlurred && !email.valid ? '2px solid red' : '2px solid purple'\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"password\">\r\n                            Password { !passwordBlurred ? null: password.valid ? null : password.message }\r\n                        </label>\r\n                        <input \r\n                            type=\"password\" \r\n                            placeholder='Your password'\r\n                            value={ password.value }\r\n                            onChange={ (event) => {\r\n                                passwordDispatch(event);\r\n                                buttonChangeHandler();\r\n                            } }\r\n                            onBlur={ passwordOnblurHandler }\r\n                            style={{\r\n                                borderBottom: passwordBlurred && !password.valid ? '2px solid red' : '2px solid purple'\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <button\r\n                        disabled={ !enabled }\r\n                    >\r\n                    {\r\n                        loading ? 'connecting...' : 'register'\r\n                    }\r\n                    </button>\r\n                </form>\r\n\r\n                <div>Have an account?<button onClick={ loginButtonHandler }>login</button></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// function that map the needed slices of the states needed from the stores\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error\r\n    }\r\n} \r\n\r\n// function that help dispatch registering action in the store\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onAuth: (payload, push) => {\r\n            return dispatch(auth(payload, push))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","\r\n\r\nimport { useReducer, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n// import Footer from \"../components/footer\";\r\nimport checkValidity from '../utils/formValidation';\r\nimport classes from '../style/login.module.css';\r\nimport { onLogin } from '../store/action/auth';\r\n\r\nfunction Register ({ login, error, loading }) {\r\n    const [ emailBlurred, setEmailBlurred ] = useState(false);\r\n    const [ passwordBlurred, setPasswordBlurred ] = useState(false);\r\n    const [ enabled, setEnabled ] = useState(false);\r\n    const { push } = useHistory();\r\n\r\n    // ruducer function for email states\r\n    const emailReducer = ( state, event ) => {\r\n        // defining rules for a valid email input\r\n        const rules = {\r\n            required: true,\r\n            isEmail: true\r\n        }\r\n\r\n        // checking the validity of the input\r\n        const validity = checkValidity(event.target.value, rules).value;\r\n        const message =  checkValidity(event.target.value, rules).message;\r\n\r\n        return {\r\n            ...state,\r\n            value: event.target.value,\r\n            valid: validity,\r\n            message: message\r\n        }\r\n    }\r\n\r\n    // ruducer function for password states\r\n    const passwordReducer = ( state, event ) => {\r\n        // defining the rules for a valid password\r\n        const rules = {\r\n            required: true,\r\n            minLength: 6,\r\n            maxLength: 30\r\n        }\r\n\r\n        // checking the validity of the inut\r\n        const validity = checkValidity(event.target.value, rules).value;\r\n        const message =  checkValidity(event.target.value, rules).message;\r\n\r\n        return {\r\n            ...state,\r\n            value: event.target.value,\r\n            valid: validity,\r\n            message: message\r\n        }\r\n    }\r\n    // connectinf the reducer function with the state using useReducer\r\n    const [ email, emailDispatch ] = useReducer(emailReducer, { value: '', valid: false, message: '' });\r\n    const [ password, passwordDispatch ] = useReducer(passwordReducer, { value: '', valid: false, message: '' });\r\n\r\n    // function for cheching if the register button should be enabled or not\r\n    const buttonChangeHandler = () => {\r\n        const extracted = email.valid && password.valid;\r\n        setEnabled(extracted);\r\n    }\r\n\r\n    const emailOnblurHandler = () => {\r\n        setEmailBlurred(true);\r\n    }\r\n\r\n    const passwordOnblurHandler = () => {\r\n        setPasswordBlurred(true);\r\n    }\r\n\r\n    // function that is called when the submit button in the form is clicked\r\n    const onSubmitFormHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        // data to be sent\r\n        const toSend = {\r\n            email: email.value,\r\n            password: password.value\r\n        }\r\n\r\n        // send the data to the backend withe the help if actio creatir and the store\r\n        login(toSend, push);\r\n    }\r\n\r\n    // handler for changing the page to login page\r\n    const registerButtonHandler = () => {\r\n        push('/register');\r\n    }\r\n\r\n    return (\r\n        <div className={ classes.main }>\r\n            <div className={ classes.container }>\r\n                <h3>login</h3>\r\n\r\n                <form\r\n                    onSubmit={ onSubmitFormHandler }\r\n                >\r\n                    { \r\n                        error && <p \r\n                            style={{ color: 'red', fontWeight: 'bold', fontSize: '23px' }}\r\n                        >something went wrong</p>\r\n                    }\r\n                    <div>\r\n                        <label htmlFor=\"email\">\r\n                            {/* if the email has not been blurred or the emailids valid, nothing would be displayed else something is displayed */}\r\n                            {/* same as the password too */}\r\n                            Email { !emailBlurred ? null: email.valid ? null : email.message }\r\n                        </label>\r\n                        <input \r\n                            type=\"email\" \r\n                            placeholder='johnDoe@gmail.com'\r\n                            value={ email.value }\r\n                            onChange= { (event) => {\r\n                                emailDispatch(event);\r\n                                buttonChangeHandler();\r\n                            } }\r\n                            onBlur={ emailOnblurHandler }\r\n                            style={{\r\n                                borderBottom: emailBlurred && !email.valid ? '2px solid red' : '2px solid purple'\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"password\">\r\n                            Password { !passwordBlurred ? null: password.valid ? null : password.message }\r\n                        </label>\r\n                        <input \r\n                            type=\"password\" \r\n                            placeholder='Your password'\r\n                            value={ password.value }\r\n                            onChange={ (event) => {\r\n                                passwordDispatch(event);\r\n                                buttonChangeHandler();\r\n                            } }\r\n                            onBlur={ passwordOnblurHandler }\r\n                            style={{\r\n                                borderBottom: passwordBlurred && !password.valid ? '2px solid red' : '2px solid purple'\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <button\r\n                        disabled={ !enabled }\r\n                    >{\r\n                        loading ? 'connecting...' : 'login'\r\n                    }\r\n                    </button>\r\n                </form>\r\n\r\n                <div>Don't have an account?<button onClick={ registerButtonHandler }>register</button></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// function that map the needed slices of the states needed from the stores\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error\r\n    }\r\n} \r\n\r\n// function that help dispatch registering action in the store\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: (payload, push) => {\r\n            return dispatch(onLogin(payload, push))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","import { createContext } from 'react';\r\n\r\nconst navContext = createContext({ clicked: false, value: false, valueHandler: () => {} });\r\n\r\nexport default navContext;","import { Link, withRouter } from 'react-router-dom';\r\n\r\nimport classes from '../../style/navItem.module.css';\r\n\r\nfunction NavItem ({ loged }) {\r\n    let toRenderUser ;\r\n    let toRenderLogout;\r\n\r\n    if (loged) {\r\n        toRenderUser = (\r\n            <li>\r\n                <Link\r\n                    to='/user'\r\n                    exact='true'\r\n                >user</Link>\r\n            </li>\r\n        );\r\n\r\n        toRenderLogout = ( \r\n            <li>\r\n                <Link\r\n                    to='/logout'\r\n                    exact='true'\r\n                >logout</Link>\r\n            </li>\r\n        );\r\n    } else {\r\n        toRenderUser = (\r\n            <li>\r\n                <Link\r\n                    to='/login'\r\n                    exact='true'\r\n                >login</Link>\r\n            </li>\r\n        );\r\n\r\n        toRenderLogout = ( \r\n            <li>\r\n                <Link\r\n                    to='/register'\r\n                    exact='true'\r\n                >register</Link>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <ul className={ classes.container }>\r\n            <li>\r\n                <Link\r\n                    to='/mine'\r\n                    exact='true'\r\n                >mine</Link>\r\n            </li>\r\n\r\n            { toRenderUser }\r\n            { toRenderLogout }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default withRouter(NavItem);","import { useHistory, withRouter } from 'react-router-dom';\r\n\r\nimport classes from '../../style/main.module.css';\r\nimport NavItem from './navItem';\r\n\r\nfunction Main ({ loged }) {\r\n    const { push } = useHistory();\r\n\r\n    const buttonClickHandler = () => {\r\n        push('/mine');\r\n    }\r\n\r\n    console.log('main ', loged)\r\n\r\n    return (\r\n        <main className={ classes.container }>\r\n            <NavItem \r\n                loged={loged}\r\n            />\r\n            <div className={ classes.main }>\r\n                <div className={ classes.mainmain}>\r\n                    <h1>nft digital mine</h1>\r\n                    <p>\r\n                        welcome to digital nft gold mine, the is best mine for mining good digital artwork for free\r\n                    </p>\r\n                    <button\r\n                        onClick={ buttonClickHandler }\r\n                    >start mining</button>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default withRouter(Main);","import { useContext } from 'react';\r\n\r\nimport Main from './headerMain';\r\nimport NavContext from '../../context/home';\r\n\r\nfunction Header ({ loged }) {\r\n    const { value } = useContext(NavContext);\r\n\r\n    return (\r\n        <header>\r\n            <Main \r\n                value={ value }\r\n                loged={ loged }\r\n            />\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport NavContext from '../context/home';\r\nimport Header from '../components/main/header';\r\n\r\nfunction Home ({ loggedIn }) {\r\n    const [ open, setOpen ] = useState(false);\r\n\r\n    const openChangeHandler = () => {\r\n        setOpen(!open);\r\n    }\r\n\r\n    return (\r\n        <div style={{ maxWidth: '100vw' }}>\r\n            <NavContext.Provider value={{ \r\n                value: open, \r\n                valueHandler: openChangeHandler\r\n            }}>\r\n                <Header \r\n                    loged={loggedIn}\r\n                />\r\n            </NavContext.Provider>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedIn: state.auth.token !== ''\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps)(Home);","import { useHistory, withRouter } from 'react-router-dom';\r\n\r\nimport classes from '../style/artCard.module.css';\r\n\r\nfunction ArtCard ({ name, createdAt, id }) {\r\n    const { push } = useHistory();\r\n\r\n    const clickHandler = () => {\r\n        push(`/my-art/${ id }`);\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={ classes.container }\r\n            onClick={ clickHandler }\r\n        >\r\n            <div>name: { name }</div>\r\n            <div>createdAt: { new Date(createdAt).toDateString() }</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(ArtCard);","import ArtCard from './artCard';\r\n\r\nfunction ArtCards ({ data }) {\r\n    return (\r\n        <div className=\"container\">\r\n            {\r\n                data.map((art) => {\r\n                    return <ArtCard \r\n                            key={ art._id }\r\n                            id={ art._id }\r\n                            name={ art.name }\r\n                            createdAt={ art.createdAt }\r\n                        />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArtCards;","import * as actionType from './actionType';\r\nimport axios from 'axios';\r\n\r\nconst getAllStart = () => {\r\n    return {\r\n        type: actionType.GET_ALL_START\r\n    }\r\n}\r\n\r\nconst getAllFail = () => {\r\n    return {\r\n        type: actionType.GET_ALL_FAIL\r\n    }\r\n}\r\n\r\nconst getAllSuccess = (data) => {\r\n    return {\r\n        type: actionType.GET_ALL_SUCCESS,\r\n        data: data\r\n    }\r\n}\r\n\r\nasync function getAllHelper (dispatch, token) {\r\n    try {\r\n        // const response = await axios.get('http://localhost:3030/api/art/my-arts', {\r\n        //     headers: { 'x-auth-token': token }\r\n        // });\r\n\r\n        // ! to be changed\r\n        const response = await axios.get(`https://proj-pix-art-wxv19.herokuapp.com/api/art/my-arts`, {\r\n            headers: { 'x-auth-token': token }\r\n        });\r\n\r\n        const data = response.data.data;\r\n\r\n        dispatch(getAllSuccess(data));\r\n    } catch (err) {\r\n        dispatch(getAllFail());\r\n    }\r\n}\r\n\r\nexport const getAllArts = (token) => {\r\n    return dispatch => {\r\n        dispatch(getAllStart());\r\n        getAllHelper(dispatch, token);\r\n    }\r\n}","import { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport ArtCards from '../components/ArtCards';\r\nimport { getAllArts } from '../store/action/getAllArt';\r\nimport classes from '../style/userPage.module.css';\r\n\r\n\r\nfunction UserPage ({ fetch, data, token, loading, error, username, loggedIn }) {\r\n    const { push } = useHistory();\r\n\r\n    useEffect(() => {\r\n        // fetch the data\r\n        fetch(token);\r\n    }, [fetch, token]);\r\n\r\n    return (\r\n        <div className={ classes.container }>\r\n            <div className={ classes.main }>\r\n                <h3>nft mine</h3>\r\n                <p> welcome { username } </p>\r\n                <button\r\n                    onClick={ () => {\r\n                        push('/mine');\r\n                    }}\r\n                >mine</button>\r\n                <div>\r\n                    <h4>here are your list of artworks</h4>\r\n                    {\r\n                        loading ?\r\n                            // would be replaced by a spinner\r\n                            <div>loading...</div> :\r\n                                error ? \r\n                                    <h2>something went wrong</h2> :\r\n                                        data.length === 0 ?\r\n                                            'You have not made any artwork' :\r\n                                            <ArtCards \r\n                                                data={ data }\r\n                                            />\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ( state ) => {\r\n    return {\r\n        data: state.getArts.arts,\r\n        token: state.auth.token, \r\n        error: state.getArts.error,\r\n        loading: state.getArts.loading,\r\n        username: state.auth.username,\r\n        loggedIn: state.auth.token !== ''\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = ( dispatch ) => {\r\n    return {\r\n        fetch: (token) => dispatch(getAllArts(token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage);","import axios from 'axios';\r\n\r\nimport * as actionType from './actionType'\r\nimport { importNode } from './node';\r\nimport { transformServerData } from '../../utils/extractColor';\r\n\r\nconst fetchStart = () => {\r\n    return {\r\n        type: actionType.FETCH_START\r\n    }\r\n}\r\n\r\nconst fetchFail = () => {\r\n    return {\r\n        type: actionType.FETCH_FAIL\r\n    }\r\n}\r\n\r\nconst fetchSuccess = (name) => {\r\n    return {\r\n        type: actionType.FETCH_SUCCESS,\r\n        name: name\r\n    }\r\n}\r\n\r\nasync function fetchHelper (dispatch, token, id) {\r\n    try {\r\n        // const response = await axios.get(`http://localhost:3030/api/art/my-art/${ id }`, {\r\n        //     headers: { 'x-auth-token': token }\r\n        // });\r\n\r\n        // ! to be changed\r\n        const response = await axios.get(`https://proj-pix-art-wxv19.herokuapp.com/api/my-art/${ id }`, {\r\n            headers: { 'x-auth-token': token }\r\n        });\r\n\r\n        const name = response.data.data.name\r\n\r\n        dispatch(fetchSuccess(name));\r\n        const transformed = transformServerData(40, 50, response.data.data.pixel);\r\n        dispatch(importNode(transformed));\r\n    } catch (err) {\r\n        dispatch(fetchFail());\r\n    }\r\n}\r\n\r\nexport const fetchArt = (token, id) => {\r\n    return dispatch => {\r\n        dispatch(fetchStart());\r\n        fetchHelper(dispatch, token, id)\r\n    }\r\n}","import { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useParams, useHistory } from 'react-router-dom'\r\n\r\nimport { fetchArt } from '../store/action/fetchArt';\r\nimport DrawingBoard from '../components/drawingBoard';\r\nimport classes from '../style/displayArts.module.css';\r\n\r\nfunction ArtDisplay ({ fetch, token, name, loading, error }) {\r\n    const { id } = useParams();\r\n    const { push } = useHistory();\r\n\r\n    useEffect(() => {\r\n        fetch(token, id);\r\n    }, [token, id, fetch]);   \r\n\r\n    const buttonClickHandler = () => {\r\n        push('/print');\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={ classes.container }>\r\n            <div className={ classes.top }>\r\n                <h3>nft mine</h3>\r\n                <div>\r\n                    <p>nft name:  { name }</p>\r\n                    <button\r\n                        onClick={ buttonClickHandler }\r\n                    >print</button>\r\n                </div>\r\n            </div>\r\n            {\r\n                loading ?\r\n                    <h3>loading...</h3> :\r\n                        error ? \r\n                            <h2> SOMETHING WENT WRONG </h2>:\r\n                            <div\r\n                                style={{ \r\n                                    width: \"100%\", \r\n                                    display: 'flex', \r\n                                    justifyContent: 'center',\r\n                                    alignItems: 'center',\r\n                                    margin: '0px 30px',\r\n                                    flexDirection: 'column',\r\n                                    fontSize: '30px',\r\n                                    fontWeight: 'bold',\r\n                                    marginTop: '2px',\r\n                                    paddingTop: '2px',\r\n                                    color: 'purple'\r\n                                }}\r\n                            >\r\n                                <DrawingBoard />\r\n                            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ( state ) => {\r\n    return {\r\n        nodes: state.node.nodes,\r\n        token: state.auth.token,\r\n        loading: state.fetchArt.loading,\r\n        error: state.fetchArt.error,\r\n        name: state.fetchArt.name\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = ( dispatch ) => {\r\n    return {\r\n        fetch: (token, id) => dispatch(fetchArt(token, id))\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps, mapDispatchToProps)(ArtDisplay);","import { useHistory } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { useEffect } from 'react';\r\n\r\nimport { logout } from '../../store/action/auth';\r\nimport classes from '../../style/logout.module.css';\r\n\r\nfunction Logout ({ logout, loggedOut }) {\r\n    const { push } = useHistory();\r\n\r\n    useEffect(() => {    \r\n        logout();\r\n    }, [logout]);\r\n\r\n    let logoutRender;\r\n\r\n    if (!loggedOut) {\r\n        logoutRender = <div>logging out......</div>\r\n    } else {\r\n        push('/')\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={ classes.container }\r\n        >\r\n            { logoutRender }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedOut: state.auth.token === ''\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        logout: () => dispatch(logout())\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps, mapDispatchToProps)(Logout);","import { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport './App.css';\nimport DrawingPage from './containers/drawingPage';\nimport Print from './containers/print';\nimport Register from './containers/register';\nimport Login from './containers/login';\nimport Home from './containers/home';\nimport UserPage from './containers/theUser';\nimport ArtDisplay from './containers/displayArts';\nimport Logout from './components/main/logout';\nimport { autoLogin } from './store/action/auth';\n\nfunction App({ autoLogin, loggedIn }) {\n  useEffect(() => {\n    autoLogin();\n  }, [autoLogin]);\n\n  console.log(loggedIn);\n  return (\n    <div className=\"App\">\n      { loggedIn && <Route path='/user' exact>\n          <UserPage />\n        </Route> }\n      <Switch>\n        <Route path='/mine' exact>\n          <DrawingPage />\n        </Route>\n\n        <Route path='/print' exact>\n          <Print />\n        </Route>\n\n        <Route path='/register' exact>\n          <Register />\n        </Route>\n\n        <Route path='/login' exact>\n          <Login />\n        </Route>\n\n        <Route path='/logout'>\n          <Logout />\n        </Route>\n\n        <Route path='/' exact>\n          <Home />\n        </Route>\n\n        { loggedIn && <Route \n          path='/my-art/:id' \n          component={ ArtDisplay }\n          exact\n        /> }\n      </Switch>\n      <Redirect to='/' />\n    </div>\n  );\n}  \n\nconst mapStateToProps = (state) => {\n  return {\n    loggedIn: state.auth.token !== ''\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    autoLogin: () => dispatch(autoLogin())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\n// function that generates the node element of the drawing board\r\nfunction generate (columnLength, rowLength, color) {\r\n    const toReturn = [];\r\n\r\n    for(let i = 0; i < columnLength; i++) {\r\n        const row = [];\r\n\r\n        // generate each row of the nodes\r\n        for (let j = 0; j < rowLength; j++) {\r\n            // turn the [i, j] value to string\r\n            let hi = \"\" + i;\r\n            let jay = \"\" + j;\r\n\r\n            // padstart each i items to have a length of 2 by force\r\n            if (hi.length < 2) {\r\n                hi = \"0\" + i\r\n            }\r\n\r\n            // padstart each j items to have a length of 2 by force\r\n            if (jay.length < 2) {\r\n                jay = \"0\" + j;\r\n            }\r\n\r\n            // creation of each node\r\n            const element = { name: `${ hi }|${ jay }`, color: color }\r\n            row.push(element);\r\n        }\r\n\r\n        toReturn.push(row);\r\n    }\r\n\r\n    return toReturn;\r\n}\r\n\r\nexport default generate;","import * as _ from 'lodash';\r\n\r\nimport * as actionType from '../action/actionType';\r\nimport generate from '../../utils/nodeGenerator';\r\n\r\nconst initialState = {\r\n    nodes: []\r\n}\r\n\r\nconst nodeReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionType.GENERATE_NODE:\r\n            // generate the nodes array with the utils function\r\n            const color = action.payload.color\r\n            return {\r\n                nodes: [ ...generate(40, 50, color) ]\r\n            }\r\n        \r\n        case actionType.PAINT:\r\n            // extract the name and remove 0 when the row/column startswith 0\r\n            const data = []\r\n            const splitname = action.payload.name.split('|');\r\n\r\n            // remove the xtra 0 defore the number\r\n            if (splitname[0].startsWith('0')  && splitname[0].length === 2) {\r\n                const i = splitname[0][1];\r\n                data.push(+i);\r\n            } else {\r\n                data.push(splitname[0])\r\n            }\r\n\r\n            // remove the xtra 0 defore the number\r\n            if (splitname[1].startsWith('0') && splitname[1].length === 2) {\r\n                const j = splitname[1][1];\r\n                data.push(+j);\r\n            } else {\r\n                data.push(splitname[1])\r\n            }\r\n\r\n            // deep clone the nodes array to modify with ease\r\n            const newNodes = _.cloneDeep(state.nodes);\r\n            // modify the color\r\n            console.log(data);\r\n            newNodes[data[0]][data[1]].color = action.payload.currentColor\r\n            console.log(action.payload.currentColor)\r\n            return {\r\n                ...state,\r\n                nodes: [ ...newNodes ]\r\n            }\r\n\r\n        case actionType.ERASE:\r\n            // extract the name and remove 0 when the row/column startswith 0\r\n            const dataE = []\r\n            const splitnameE = action.payload.name.split('|');\r\n\r\n            // remove the xtra 0 defore the number\r\n            if (splitnameE[0].startsWith('0') ) {\r\n                const i = splitnameE[0][1];\r\n                dataE.push(+i);\r\n            } else {\r\n                dataE.push(splitnameE[0])\r\n            }\r\n\r\n            // remove the xtra 0 defore the number\r\n            if (splitnameE[1].startsWith('0')) {\r\n                const j = splitnameE[1][1];\r\n                dataE.push(+j);\r\n            } else {\r\n                dataE.push(splitnameE[1])\r\n            }\r\n    \r\n            // deep clone the nodes array to modify with ease\r\n            const newNodesE = _.cloneDeep(state.nodes);\r\n            // modify the color\r\n            newNodesE[dataE[0]][dataE[1]].color = action.payload.canvasColor\r\n\r\n            return {\r\n                ...state,\r\n                nodes: [ ...newNodesE ]\r\n            }\r\n\r\n        case actionType.UPDATE_COLOR:\r\n            // clone\r\n            // a forEach loop on every newNodesE\r\n            // check if the color is different from the backgroun color before\r\n                // if yes, dont change the color\r\n                // else we change the color to the new background color\r\n            // return the new node state\r\n            const clonedNode = _.cloneDeep(state.nodes);\r\n\r\n            clonedNode.forEach((row) => {\r\n                row.forEach((node) => {\r\n                    if (node.color === action.payload.oldBackground) {\r\n                        node.color = action.payload.color\r\n                    }\r\n                });\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                nodes: clonedNode\r\n            }\r\n\r\n        case actionType.CLEAR_CANVAS:\r\n            const cloned = _.cloneDeep(state.nodes);\r\n\r\n            cloned.forEach((row) => {\r\n                row.forEach((node) => {\r\n                    node.color = action.backgroundColor\r\n                });\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                nodes: cloned\r\n            }\r\n\r\n        case actionType.IMPORT_NODE:\r\n            return {\r\n                ...state,\r\n                nodes: [\r\n                    ...action.data\r\n                ]\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default nodeReducer;","import * as actionType from '../action/actionType';\r\n\r\n// initial state of the drawing page\r\nconst initialState = {\r\n    shouldPaint: true,\r\n    canvasColor: 'yellow',\r\n    currentColor: '#00ff00',\r\n    shrink: false,\r\n    border: true,\r\n    currentShape: 1\r\n}\r\n\r\n// reducer for manipulating the general state of the drawing page\r\nconst generalReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionType.SHOULD_ERASE:\r\n            // to set if the clicking should paint or erase\r\n            return {\r\n                ...state,\r\n                shouldPaint: !state.shouldPaint\r\n            }\r\n\r\n        case actionType.CHANGE_BORDER:\r\n            // to toggle the border on each node element\r\n            return {\r\n                ...state,\r\n                border: !state.border\r\n            }\r\n\r\n        case actionType.COLOR_CHANGE:\r\n            // to change the painting color of the app\r\n            return {\r\n                ...state,\r\n                currentColor: action.color\r\n            }\r\n\r\n            case actionType.CHANGE_CANVAS_COLOR:\r\n                // to change the color of the canvas\r\n                return {\r\n                    ...state,\r\n                    canvasColor: action.color\r\n                }\r\n    \r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default generalReducer;","import * as actionType from '../action/actionType';\r\n\r\n// the initial state of the authentication reducer\r\nconst initialState = {\r\n    userId: '', \r\n    token: '', \r\n    error: false,\r\n    loading: false,\r\n    username: ''\r\n}\r\n\r\n// authentication reducer\r\nconst reducer = ( state = initialState, action ) => {\r\n    switch(action.type) {\r\n        case actionType.START_REGISTER:\r\n            // registration starts\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: false,\r\n                userId: '',\r\n                username: ''\r\n            }\r\n\r\n        case actionType.REGISTER_FAIL:\r\n            // failed registration\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: true,\r\n                userId: '',\r\n                username: ''\r\n            }\r\n\r\n        case actionType.REGISTER_SUCCESS:\r\n            // successful registration\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: false,\r\n                token: action.payload.token,\r\n                userId: action.payload.id,\r\n                username: action.payload.username\r\n            }\r\n        case actionType.LOGIN_START:\r\n            // login starts\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: false,\r\n                userId: '',\r\n                username: ''\r\n            }\r\n\r\n        case actionType.LOGIN_FAIL:\r\n            // failed loging in\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: true,\r\n                userId: '',\r\n                username: ''\r\n            }\r\n\r\n        case actionType.LOGIN_SUCCESS:\r\n            // successful user login\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                userId: action.payload.id,\r\n                token: action.payload.token,\r\n                username: action.payload.username\r\n            }\r\n\r\n        case actionType.LOGOUT:\r\n            // loging a user out\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                userId: '',\r\n                token: '', \r\n                error: false,\r\n                username: ''\r\n            }\r\n\r\n        case actionType.AUTO_SIGN:\r\n            // signing in automatically by browser\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                userId: action.payload.id,\r\n                token: action.payload.token,\r\n                error: false,\r\n                username: action.payload.username\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as actionType from '../action/actionType';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    error: false\r\n}\r\n\r\nconst reducer = ( state = initialState, action ) => {\r\n    switch (action.type) {\r\n        case actionType.SAVE_ART_START:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: false\r\n            }\r\n\r\n        case actionType.SAVE_ART_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: true\r\n            }\r\n\r\n        case actionType.SAVE_ART_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: false\r\n            }\r\n    \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as actionType from '../action/actionType';\r\n\r\nconst initialState = {\r\n    arts: [],\r\n    error: false,\r\n    loading: false\r\n}\r\n\r\nconst reducer = ( state = initialState, action ) => {\r\n    switch (action.type) {\r\n        case actionType.GET_ALL_START:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: false\r\n            }\r\n\r\n        case actionType.GET_ALL_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: true\r\n            }\r\n\r\n        case actionType.GET_ALL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: false,\r\n                arts: [\r\n                    ...action.data\r\n                ]\r\n            }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer","import * as actionType from '../action/actionType';\r\n\r\nconst initialState = {\r\n    error: false,\r\n    loading: false,\r\n    name: ''\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionType.FETCH_START:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: false,\r\n                name: ''\r\n            }\r\n\r\n        case actionType.FETCH_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: true,\r\n                name: ''\r\n            }\r\n\r\n        case actionType.FETCH_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: false,\r\n                name: action.name\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport thunk from 'redux-thunk';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport nodeReducer from './store/reducers/node';\nimport generalReducer from './store/reducers/generals';\nimport authReducer from './store/reducers/auth';\nimport saveReducer from './store/reducers/saveArt';\nimport getAllArtsReducer from './store/reducers/getAllArt';\nimport fetchArtReducer from './store/reducers/fetchArt';\n\nconst reducers = combineReducers({\n  gnr: generalReducer,\n  node: nodeReducer,\n  auth: authReducer,\n  save: saveReducer,\n  getArts: getAllArtsReducer,\n  fetchArt: fetchArtReducer\n});\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers, composeEnhancer(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();"],"sourceRoot":""}